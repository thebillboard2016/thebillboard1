Design ofThe BillboardBy Samuel Meijer and Lars LorchDecember 9, 2016The fundamental idea of our app is providing a service that enables users to anonymously share snapshots on a local basis. It can therefore also be seen as a way to crowd source photos of events in your area. Imagine The Harvard-Yale Game and everyone uses The Billboard. Users will be able to see popular and close photos others have taken in the area and will be more up to date of the event. Imagine hundreds and thousands of billboards were spread all over the town, state, or country. No matter where you go, you will be able to look at The Billboard, and see what has been or is going on because of photos people have been or are posting to The Billboard.Swift, Xcode and BuddyThe Billboard is written in Swift, an object-oriented programming language based on C, that was developed by Apple for the development of iOS apps. We implemented The Billboard with the help of the IDE Xcode that is provided by Apple as well.The backend of our online mobile application is provided by the Buddy Platform and the Buddy SDK. We use the Buddy SDK to communicate between the front end of the app and the backend online on the Buddy Platform. All user data, locations and photos we need to store for The Billboard are stored in the Buddy Platform.  We also manage users and devices from the Buddy Platform.Development and DistributionFor simultaneous development of both of us, we set up a GitHub repository and a remote in Xcode. That way, it is possible for both of us to push and pull what the other had contributed to the project and create branches for different features before merging it into the master branch. The repository can be found athttps://github.com/thebillboard2016/thebillboard1The project can be downloaded here.Login and Registration After launching the app, the login screen of The Billboard appears. The user has the option of logging into his account or register for The Billboard. When registering, a new user will be created in our backend on the Buddy Platform to enable future login and use of the service. When logging in, the user will be logged in to the Buddy platform as well, and the segued to the main interface of The Billboard.Not that although the user’s information is necessary for registration and login, posting to and accessing The Billboard is completely anonymous. It is necessary for us to have separable user’s to communicate with the back end in an organized way while many people might be using The Billboard.The Main Interface: Local Feed, Camera, MapWhen successfully logged in, the user has access to the main interface of the app. The design of three main views as the basis of the app has several reasons. It covers all three major specifications of The Billboard: •	Anonymously uploading own geotagged snapshots from the camera or the library•	Providing a local feed of snapshots in the area•	Giving access to crowd sourced snapshots at locations all over the globeAt the same time, the design of only three major functions makes the user experience simple and powerful. There are no convoluted paths the user has to take to instantly make a snapshot in a situation that he wants to post to The Billboard.The Local FeedThe Local Feed is designed to give the user a summary of the six closest snapshots that have been taken at his location by her/him and other users. It is made to give local information and impressions of events and locations that the user relates to. The Billboard will search our Buddy database for the six closest photos to the current location of the user, and show them in the feed.The MapThe map on the other hand stands in contrast with the local feed. It is made to show the user around in locations that he or she would never be able to see.  We use Apple’s own MapKit to implement the map and show where on the map photos were posted to the billboard. The class MKPointAnnotation and its protocol is used to present the locations on the map. Please read the limitations section of this design document to understand the current functionality.In The Billboard 2.0, the goal will be to cluster local groups of photos to clickable objects, which then can be referred to as the different billboards. The user could then look at and post to these explicit billboards.The CameraThe camera is the users interface to post to The Billboard. On the bottom Tab bar, the user has the option to make a photo with the camera or to select a photo from the library. The photo can be saved afterwards as well because it can be expected that the user’s The Billboard snapshot is worth saving. Then, the user can add an optional caption to the picture that will later appear in the feed in the provided text field. Finally, by hitting the top right Upload button, the user can post the photo and caption to The Billboard. Since the user’s location is tracked automatically once he or she agrees upon it when asked at the start, the photo will be given a location tag as well, for later plotting on the map.Limitations of The Billboard 1.0Due to a minor but difficult problem, we were not yet able to properly GET photo information like caption or location from our Buddy server. We know that getting the information from The Billboard is done bylet params: [String: Any?] = [	"contentType" : BPCoordinateRangeMake(41, -72, 20000),]Buddy.get("/pictures", parameters: params, class: BPPageResults.self) { (obj: Any, error: Error?) in}We know that the GET method returns an object of type BPPageResults when querying the database. We have done so successfully. However, after many hours of trying to guess how to work with this BPPageResults class and access the actual results of the query, we were not able to read or work with the information provided. The documentation is very scarce and also not available in Swift.Because of this bug, our primary service of querying for pictures in a location-based manner is inhibited. We can’t query for location information because we cannot work with the return type BPPageResults of the GET request. Therefore, the app now downloads The Billboard photos taken from users to the local feed, with their picture_id provided in the code, as we were unable to obtain them with GET. Likewise, the locations shown on the map are the locations where these photos were taken, but provided in the code as we are unable to work with the return type of the photo query request. The Billboard right now basically only simulates the location-based feature. 